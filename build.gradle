buildscript {
	ext {
		springBootVersion = '1.2.6.RELEASE'
	}
	repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/plugins-release" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('org.springframework.build.gradle:propdeps-plugin:0.0.7')
	}
}

ext {
    springBootVersion = '1.2.6.RELEASE'
    jacksonVersion = '2.4.6'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'

group = "se.svt.core.lib.utils.rest"
description = "Core Systems - Rest Client"
version = '0.0.1-SNAPSHOT'

idea {
	project {
		jdkName = '1.8'
		languageLevel = '1.8'

		vcs = 'Git'
	}
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenLocal()
    maven { url "http://nexus.svt.se/content/repositories/public" }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/plugins-release" }
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
    jcenter()
    maven {
        url "https://svtrepo.artifactoryonline.com/svtrepo/repo"
        credentials {
            username 'reader'
            password artifactoryReaderPassword
        }
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

    optional("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
    optional("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
    optional("org.springframework.retry:spring-retry:1.1.2.RELEASE")

    optional('org.projectlombok:lombok:1.16.6')

    // tag::utils[]
    compile('com.google.guava:guava:19.0')
    compile('org.apache.commons:commons-lang3:3.4')
    compile('org.apache.commons:commons-collections4:4.1')
    // end::utils[]

	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
    testCompile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}")
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            repositories {
                maven {
                    ext {
                        if (project.version.endsWith('-SNAPSHOT')) {
                            url "http://svtrepo.artifactoryonline.com/svtrepo/svt-snapshots-local"
                        } else {
                            url "http://svtrepo.artifactoryonline.com/svtrepo/libs-releases-local"
                        }

                        credentials {
                            username 'deployer'
                            password artifactoryDeployPassword
                        }
                    }
                }
            }

            pom.withXml {
                asNode().dependencies.dependency.findAll { xmlDependency ->

                    // mark optional dependencies
                    if (project.configurations.optional.allDependencies.findAll { dependency ->
                        xmlDependency.groupId.text() == dependency.group && xmlDependency.artifactId.text() == dependency.name
                    }) {
                        def xmlOptional = xmlDependency.optional[0]
                        if (!xmlOptional) {
                            xmlOptional = xmlDependency.appendNode('optional')
                        }
                        xmlOptional.value = 'true'
                    }

                    // fix maven-publish issue when all maven dependencies are placed into runtime scope
                    if (project.configurations.compile.allDependencies.findAll { dependency ->
                        xmlDependency.groupId.text() == dependency.group && xmlDependency.artifactId.text() == dependency.name
                    }) {
                        def xmlScope = xmlDependency.scope[0]
                        if (!xmlScope) {
                            xmlScope = xmlDependency.appendNode('scope')
                        }
                        xmlScope.value = 'compile'
                    }

                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}
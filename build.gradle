plugins {
    id 'java'
    id 'idea'
    id "io.spring.dependency-management" version "1.0.1.RELEASE"
    id 'maven'
    id 'maven-publish'
    id 'nebula.optional-base' version '3.0.3'
    id 'nebula.provided-base' version '3.0.3'
}

group = "io.github.polysantiago"
description = "Spring Boot Rest Client"

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'

        vcs = 'Git'
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencyManagement {
    imports {
        mavenBom 'io.spring.platform:platform-bom:Brussels-SR1'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-autoconfigure")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework:spring-web")
    compile("org.springframework:spring-webmvc")

    compile 'org.springframework:spring-aop', optional
    compile 'org.springframework.retry:spring-retry', optional
    compile 'org.aspectj:aspectjweaver', optional

    provided 'org.projectlombok:lombok'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'net.javacrumbs.future-converter:future-converter-spring-java8:1.1.0'

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
    testCompile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    testCompile('org.assertj:assertj-core:3.6.2')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                // fix maven-publish issue when all maven dependencies are placed into runtime scope
                asNode().dependencies.dependency.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.dependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each { it.scope*.value = 'compile' }
            }
        }
    }
}

publish.dependsOn check

test {
    testLogging {
        exceptionFormat = 'full'
    }
}
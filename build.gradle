buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('org.springframework.build.gradle:propdeps-plugin:0.0.7')
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '1.5.1.RELEASE'
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.5.0'
}

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'



group = "se.svt.core.lib.utils.rest"
description = "Core Systems - Rest Client"

project.version = scmVersion.version

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'

        vcs = 'Git'
    }
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://svtrepo.artifactoryonline.com/svtrepo/repo"
        credentials {
            username 'reader'
            password artifactoryReaderPassword
        }
    }
}

dependencyManagement {
    dependencies {
        dependency 'com.google.guava:guava:19.0'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")

    optional("org.springframework.boot:spring-boot-starter-aop")
    optional("org.springframework.boot:spring-boot-configuration-processor")
    optional("org.springframework.retry:spring-retry")

    // tag::utils[]
    optional('org.projectlombok:lombok')
    compile('com.google.guava:guava')
    compile('org.apache.commons:commons-lang3:3.4')
    compile('org.apache.commons:commons-collections4:4.1')
    // end::utils[]

    compile('net.javacrumbs.future-converter:future-converter-spring-java8:0.3.0')

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8")
    testCompile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    testCompile('com.fasterxml.jackson.module:jackson-module-parameter-names')
    testCompile('org.assertj:assertj-core:3.5.2')
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            repositories {
                maven {
                    ext {
                        if (project.version.endsWith('-SNAPSHOT')) {
                            url "http://svtrepo.artifactoryonline.com/svtrepo/svt-snapshots-local"
                        } else {
                            url "http://svtrepo.artifactoryonline.com/svtrepo/libs-releases-local"
                        }

                        credentials {
                            username 'deployer'
                            password artifactoryDeployPassword
                        }
                    }
                }
            }

            pom.withXml {
                asNode().dependencies.dependency.findAll { xmlDependency ->

                    // mark optional dependencies
                    if (project.configurations.optional.allDependencies.findAll { dependency ->
                        xmlDependency.groupId.text() == dependency.group && xmlDependency.artifactId.text() == dependency.name
                    }) {
                        def xmlOptional = xmlDependency.optional[0]
                        if (!xmlOptional) {
                            xmlOptional = xmlDependency.appendNode('optional')
                        }
                        xmlOptional.value = 'true'
                    }

                    // fix maven-publish issue when all maven dependencies are placed into runtime scope
                    if (project.configurations.compile.allDependencies.findAll { dependency ->
                        xmlDependency.groupId.text() == dependency.group && xmlDependency.artifactId.text() == dependency.name
                    }) {
                        def xmlScope = xmlDependency.scope[0]
                        if (!xmlScope) {
                            xmlScope = xmlDependency.appendNode('scope')
                        }
                        xmlScope.value = 'compile'
                    }

                }
            }
        }
    }
}

publish.dependsOn check

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}
